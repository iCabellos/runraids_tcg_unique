# Generated by Django 5.1.6 on 2025-09-02 14:23

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Alliance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Artifact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slot', models.CharField(choices=[('weapon', 'Arma'), ('necklace', 'Collar'), ('ring', 'Anillo')], max_length=20)),
                ('description', models.TextField(blank=True, default='')),
                ('image', models.ImageField(blank=True, null=True, upload_to='artifacts/')),
            ],
        ),
        migrations.CreateModel(
            name='BuildingType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('hq', 'Edificio principal'), ('xp_tower_heroes', 'Edificio de gestión para héroes'), ('xp_farming', 'Edificio almacenador de experiéncia'), ('market', 'Mercado'), ('alliance', 'Centro de la alianza'), ('camp', 'Campamento principal'), ('cf', 'Hoguera'), ('store', 'Alijo principal'), ('wc_portal', 'Baño invocador')], max_length=50, unique=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='buildings/')),
            ],
        ),
        migrations.CreateModel(
            name='Hero',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codename', models.SlugField(help_text='Nombre corto y único (una sola palabra)', max_length=40, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, default='')),
                ('image', models.ImageField(blank=True, null=True, upload_to='heroes/')),
                ('race', models.CharField(choices=[('elf', 'Elfo'), ('orc', 'Orco'), ('dwarf', 'Enano'), ('human', 'Humano'), ('ogre', 'Ogro'), ('undead', 'No-muerto'), ('goblin', 'Goblin')], max_length=20)),
                ('klass', models.CharField(choices=[('mage', 'Mago'), ('warrior', 'Guerrero'), ('rogue', 'Pícaro'), ('shaman', 'Chamán'), ('priest', 'Sacerdote'), ('ranger', 'Explorador/Arquero')], max_length=20)),
                ('primary_mechanic', models.CharField(choices=[('combat', 'Combate'), ('gathering', 'Recolección'), ('construction', 'Construcción')], default='combat', max_length=20)),
                ('damage_profile', models.CharField(choices=[('physical', 'Físico'), ('magical', 'Mágico'), ('mixed', 'Mixto')], default='mixed', max_length=10)),
                ('subrole', models.CharField(blank=True, choices=[('dps', 'DPS Puro'), ('subdps', 'SubDPS (potenciador de daño)'), ('support', 'Soporte/Buffer'), ('defender', 'Defensivo/Tanque'), ('healer', 'Curandero')], max_length=20, null=True)),
                ('base_hp', models.IntegerField(default=50)),
                ('base_atk_mag', models.IntegerField(default=10)),
                ('base_atk_phy', models.IntegerField(default=10)),
                ('base_def_mag', models.IntegerField(default=10)),
                ('base_def_phy', models.IntegerField(default=10)),
                ('base_speed', models.IntegerField(default=10)),
                ('base_crit_chance', models.FloatField(default=0.05, help_text='Prob. crítico base (0.05 = 5%)')),
                ('base_crit_damage', models.FloatField(default=1.5, help_text='Multiplicador de daño crítico (1.5 = 150%)')),
                ('rage_max', models.IntegerField(default=100)),
                ('starting_rage', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('firstname', models.CharField(max_length=255)),
                ('password_member', models.CharField(max_length=128)),
                ('email', models.EmailField(max_length=255)),
                ('phone', models.IntegerField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Rarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('common', 'Common'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='ResourceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, default='')),
                ('effect_type', models.CharField(choices=[('damage', 'Daño'), ('heal', 'Curación'), ('buff', 'Mejora (buff)'), ('debuff', 'Perjuicio (debuff)')], max_length=10)),
                ('target', models.CharField(choices=[('self', 'Sí mismo'), ('ally_single', 'Aliado objetivo'), ('ally_team', 'Equipo aliado'), ('enemy_single', 'Enemigo objetivo'), ('enemy_team', 'Equipo enemigo (AoE)')], default='enemy_single', max_length=20)),
                ('damage_profile', models.CharField(choices=[('physical', 'Físico'), ('magical', 'Mágico'), ('mixed', 'Mixto')], default='mixed', max_length=10)),
                ('scaling_stat', models.CharField(choices=[('none', 'Sin escalado'), ('atk_phy', 'Ataque físico'), ('atk_mag', 'Ataque mágico'), ('hp', 'Vida'), ('def_phy', 'Defensa física'), ('def_mag', 'Defensa mágica'), ('speed', 'Velocidad')], default='none', max_length=12)),
                ('base_value', models.FloatField(default=0.0, help_text='Daño/Curación base (valor absoluto). Para BUFF/DEBUFF usa percent_value.')),
                ('percent_value', models.FloatField(default=0.0, help_text='Porcentaje para BUFF/DEBUFF (0.20 = +20%).')),
                ('passive_trigger', models.CharField(choices=[('always', 'Siempre activo'), ('on_hit', 'Al golpear'), ('on_kill', 'Al matar'), ('on_damaged', 'Al recibir daño'), ('on_battle_start', 'Al empezar el combate')], default='always', max_length=20)),
                ('rage_gain', models.IntegerField(default=0)),
                ('rage_cost', models.IntegerField(default=0)),
                ('per_level_multiplier', models.FloatField(default=0.2)),
                ('max_level', models.PositiveIntegerField(default=5)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='AllianceSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('open_to_join', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True)),
                ('raid_notifications', models.BooleanField(default=True)),
                ('custom_rules', models.TextField(blank=True)),
                ('alliance', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='core.alliance')),
            ],
        ),
        migrations.CreateModel(
            name='AllianceBuilding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(default=1)),
                ('alliance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buildings', to='core.alliance')),
                ('building_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.buildingtype')),
            ],
        ),
        migrations.CreateModel(
            name='HeroSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot', models.CharField(choices=[('basic', 'Ataque básico (suma ira)'), ('ultimate', 'Ulti (consume ira)'), ('passive_1', 'Pasiva 1'), ('passive_2', 'Pasiva 2')], max_length=12)),
                ('rage_gain_override', models.IntegerField(blank=True, null=True)),
                ('rage_cost_override', models.IntegerField(blank=True, null=True)),
                ('hero', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.hero')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.skill')),
            ],
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accepted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_requests', to='core.member')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_requests', to='core.member')),
            ],
        ),
        migrations.CreateModel(
            name='AllianceMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('leader', 'Líder'), ('co_leader', 'Co-líder'), ('officer', 'Oficial'), ('member', 'Miembro')], default='member', max_length=20)),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('alliance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='core.alliance')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alliances', to='core.member')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerArtifact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('artifact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.artifact')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artifacts', to='core.member')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerBuilding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(default=1)),
                ('building_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.buildingtype')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.member')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerHero',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experience', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('hero', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.hero')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.member')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerHeroEquipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot', models.CharField(choices=[('weapon', 'Arma'), ('necklace', 'Collar'), ('ring', 'Anillo')], max_length=20)),
                ('equipped_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('player_artifact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.playerartifact')),
                ('player_hero', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='equipment', to='core.playerhero')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerHeroSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveIntegerField(default=1)),
                ('dupes_spent', models.PositiveIntegerField(default=0)),
                ('hero_skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.heroskill')),
                ('player_hero', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='core.playerhero')),
            ],
        ),
        migrations.AddField(
            model_name='hero',
            name='rarity',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.rarity'),
        ),
        migrations.AddField(
            model_name='artifact',
            name='rarity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.rarity'),
        ),
        migrations.CreateModel(
            name='PlayerResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField(default=0)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.member')),
                ('resource_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.resourcetype')),
            ],
        ),
        migrations.CreateModel(
            name='BuildingLevelCost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveIntegerField()),
                ('amount', models.PositiveIntegerField()),
                ('building_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='level_costs', to='core.buildingtype')),
                ('resource_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.resourcetype')),
            ],
        ),
        migrations.CreateModel(
            name='ArtifactSubstat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('substat_type', models.CharField(choices=[('bonus_atk_phy', '% Ataque físico'), ('bonus_atk_mag', '% Ataque mágico'), ('bonus_hp', '% Vida'), ('bonus_def_phy', '% Defensa física'), ('bonus_def_mag', '% Defensa mágica'), ('bonus_speed', '% Velocidad'), ('crit_chance', '% Prob. crítico'), ('crit_damage', '% Daño crítico'), ('heal_bonus', '% Bonificación de curación'), ('rage_start', 'Ira inicial (valor absoluto)'), ('rage_on_hit', 'Ira al golpear (valor absoluto)'), ('gather_speed_global', '% Velocidad de recolección (global)'), ('gather_yield_global', '% Rendimiento de recolección (global)'), ('construction_speed', '% Velocidad de construcción'), ('gather_speed_resource', '% Vel. recolección por recurso'), ('gather_yield_resource', '% Rendimiento por recurso')], max_length=40)),
                ('value', models.FloatField(default=0.0)),
                ('artifact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='substats', to='core.artifact')),
                ('resource_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.resourcetype')),
            ],
        ),
        migrations.AddField(
            model_name='hero',
            name='skills',
            field=models.ManyToManyField(related_name='heroes', through='core.HeroSkill', to='core.skill'),
        ),
        migrations.CreateModel(
            name='Enemy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('image', models.ImageField(blank=True, null=True, upload_to='enemies/')),
                ('description', models.TextField(blank=True)),
                ('level', models.IntegerField(default=1)),
                ('base_hp', models.IntegerField()),
                ('attack', models.IntegerField()),
                ('defense', models.IntegerField()),
                ('speed', models.IntegerField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('skills', models.ManyToManyField(blank=True, to='core.skill')),
            ],
        ),
        migrations.CreateModel(
            name='Ability',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.skill',),
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('from_request', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.friendrequest')),
                ('member_a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendships_a', to='core.member')),
                ('member_b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendships_b', to='core.member')),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('member_a', models.F('member_b')), _negated=True), name='friendship_no_self')],
                'unique_together': {('member_a', 'member_b')},
            },
        ),
        migrations.AddConstraint(
            model_name='friendrequest',
            constraint=models.CheckConstraint(condition=models.Q(('sender', models.F('receiver')), _negated=True), name='friendrequest_no_self'),
        ),
        migrations.AlterUniqueTogether(
            name='friendrequest',
            unique_together={('sender', 'receiver')},
        ),
        migrations.AlterUniqueTogether(
            name='alliancemember',
            unique_together={('alliance', 'member')},
        ),
        migrations.AlterUniqueTogether(
            name='playerhero',
            unique_together={('member', 'hero')},
        ),
        migrations.AlterUniqueTogether(
            name='playerheroequipment',
            unique_together={('player_hero', 'slot')},
        ),
        migrations.AlterUniqueTogether(
            name='playerheroskill',
            unique_together={('player_hero', 'hero_skill')},
        ),
        migrations.AlterUniqueTogether(
            name='buildinglevelcost',
            unique_together={('building_type', 'level', 'resource_type')},
        ),
        migrations.AlterUniqueTogether(
            name='heroskill',
            unique_together={('hero', 'slot')},
        ),
    ]
